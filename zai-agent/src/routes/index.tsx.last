// import Main from "@/pages/main";
// const Chart = lazy(() => import(/* webpackChunkName: "About" */'@/pages/chart'))
// const About = lazy(() => import(/* webpackChunkName: "About" */'@/pages/about'))
// import CreateToken from "@/pages/createToken";
// import Mine from "@/pages/mine";
// import TokenLayout from "@/pages/tokens/layout";
// import Tokens from "@/pages/tokens/index";
import React from "react";
import { ComponentType, Suspense } from "react";
import { createHashRouter, RouteObject, RouterProvider } from "react-router-dom"
import rr from 'virtual:routers';
console.log('rr', rr);

const layouts = import.meta.glob('../pages/**/layout.tsx');
const comps = import.meta.glob('../pages/**/index.tsx');

const wrapSuspense = (importer: () => Promise<{ default: ComponentType }>) => {
    if (!importer) {
        return undefined;
    }
    const Component = lazy(importer);
    return (
        <Suspense fallback={null}>
            <Component />
        </Suspense>
    );
}

const wrapComponent = (importer: () => Promise<{ default: ComponentType }>) => {
    if (!importer) {
        return undefined;
    }
    const Component = lazy(importer);
    return (
            <Component />
    );
}

const findPath = (deep: number = 0) => {
    const array = Object.keys(comps).map((filePath) => {
        const key = filePath.replace('../pages/', '').split("/")
        if (deep < key.length - 1) {
            const indexFile = filePath.endsWith('index.tsx');
            const layoutFile = filePath.endsWith('layout.tsx');
            const isDir = key.length > deep + 2;
            return {
                key: key[deep],
                indexFile,
                layoutFile,
                isDir,
                filePath: filePath,
            };
        } else {
            return null;
        }
    });
    const res = array.reduce((result : any, item) => {
        if (result && item) {
            const groupKey = item['key'];
            if (!result[groupKey]) {
                result[groupKey] = [];
            }
            result[groupKey].push(item);
            return result;
        }
    }, {})
    console.log(res);
    return [... new Set(array)];
}

const createRouter = () => {
    const array = Object.keys(comps).map((filePath) => {
        const key = filePath.replace('../pages/', '')
        console.log('createRouter', key)
        return key[0];
    });
}

const start = () => {

    const buildTree = (filepath: string, paths: string[], tree: any) => {
        if (paths.length === 0) {
            return;
        }
        const currentPath = paths.shift();
        const childNode = { path: currentPath, filepath, children: []}
        const existingNode = tree.children.find((node:any) => node.path === currentPath);
        if (existingNode) {
            buildTree(filepath, paths, existingNode);
        } else {
            tree.children.push(childNode);
            buildTree(filepath, paths, childNode);
        }
    }

    const root = {
        path: 'root', filepath: '', children: []
    }

    const layoutKeys = Object.keys(layouts).map((filePath) => {
        let key = filePath.replace('../pages/', '').replace('/layout.tsx', '');
         return {
            filePath,
            prefix: key === '' ? '' : key, deep: key.split('/').length - 1
         }
    }).sort((a, b) => a.deep - b.deep).map((item) => {
        const paths = item.prefix.split('/');
        console.log('buildTree before', paths);
        buildTree(item.filePath, paths, root);
        return item.prefix;
    });

    console.log('layoutKeys', layoutKeys);
    const res111 = Object.keys(comps).map((filePath) => {
        const src = filePath.replace('../pages/', '');
        if (src === 'index.tsx') {
            return {
                filePath, 
                prefix: '',
                deep: filePath.replace('../pages/', '').split('/').length - 1
            }
        }
        const prefix = filePath.replace('../pages/', '').replace('/index.tsx', '');
        return {
            filePath, 
            prefix,
            deep: filePath.replace('../pages/', '').split('/').length - 1
        }
    }).sort((a, b) => b.deep - a.deep).map((item) => {
        const paths = item.prefix.split('/');
        const findItem = layoutKeys.find((layoutKey) => layoutKey === item.prefix);
        console.log('comps', paths, item.prefix, findItem);
        if (findItem) {
            paths.push("");
        }
        buildTree(item.filePath, paths, root);
    });
    console.log('layoutKeys', root);

    const allPages = {...comps, ...layouts};
    const rootRouters = {
        children: [],
    };
    const addRouters = (localRouter: any, item: any, deep: number) => {
        if (item.children.length > 0) {
            const localRouter1 = {
                path: (deep === 0 ? '/':'') + item.path,
                element: wrapComponent(allPages[item.filepath] as unknown as any),
                children: [],
            };
            localRouter.children.push(localRouter1);
            item.children.map((child:any) => {
                addRouters(localRouter1, child, deep+1);
            })
        } else {
            localRouter.children.push({
                path: (deep === 0 ? '/':'') + item.path,
                element: wrapComponent(allPages[item.filepath] as unknown as any),
            })
        }
    }

    root.children.map((item:any)=> {
        addRouters(rootRouters, item, 0);
    })

    return rootRouters.children;
}

const routers = start();
console.log('routers', routers);

const router = createHashRouter(routers);
const Routes = () => {
    return <RouterProvider router={router} />
}


export default Routes;